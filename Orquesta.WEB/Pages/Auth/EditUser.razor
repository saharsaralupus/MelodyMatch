@page "/EditUser"
@using CurrieTechnologies.Razor.SweetAlert2;
@using Orquesta.Shared.Entities;
@using Orquesta.WEB.Pages.Auth;
@using Orquesta.WEB.Repositories;
@using Orquesta.WEB.Services
@using Orquesta.Shared.DTOs;
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

@using System.IO
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Formats.Jpeg


<style>
    /* Agrega estos estilos en tu archivo CSS principal o en la sección de estilos de tu página Razor */

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
        padding: 30px 30px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

</style>

@if (user is null)
{
    <div class="spinner" />
}
else
{
    <EditForm Model="user" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="bi bi-person-slash" /> Editar usuario
                    <a class="btn btn-sm btn-outline-primary float-end" @onclick=@(() => ShowModal2())><i class="bi bi-key" /> Cambiar contraseña</a>
                    <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="bi bi-floppy2" /> Guardar cambios</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Nombres:</label>
                            <div>
                                <InputText width="10" @bind-Value="@user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Apellidos:</label>
                            <div>
                                <InputText width="10" @bind-Value="@user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Documento:</label>
                            <div>
                                <InputText width="10" @bind-Value="@user.Document" />
                                <ValidationMessage For="@(() => user.Document)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Teléfono:</label>
                            <div>
                                <InputText width="10" @bind-Value="@user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Dirección:</label>
                        </div>
                    </div>
                    <div class="col-6">

                        <div class="mb-3">
                            <InputFile OnChange="HandleSelectedImage" class="form-control" />
                            @if (!string.IsNullOrEmpty(imageUrl))
                            {
                                <img src="@imageUrl" class="image-preview" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>


    <div id="myModal" class="modal" style="@(isModalVisible ? "display:flex;" : "display:none;")">
        <div class="modal-content">
            <span class="close" @onclick="HideModal">&times;</span>
            <!-- Contenido del modal -->
            <ChangePassword />
        </div>
    </div>

}

@code {

    private bool isModalVisible = false;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private async Task ShowModal2()
    {
        isModalVisible = true;
    }
    private void HideModal()
    {
        isModalVisible = false;
    }

    private User user;
    private string imageUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();

        if (!string.IsNullOrEmpty(user!.Photo))
        {
            imageUrl = user.Photo;
            user.Photo = null;
        }

    }

    private async Task LoadUserAsyc()
    {
        var responseHTTP = await repository.GetAsync<User>($"/api/accounts");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        user = responseHTTP.Response;
    }



    private async Task HandleSelectedImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var resizedImage = await ResizeImage(file);
            var base64Image = $"data:image/jpeg;base64,{resizedImage}";
            user.Photo = resizedImage;
            imageUrl = base64Image;
        }
    }

    private async Task<string> ResizeImage(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var image = await Image.LoadAsync(stream);
        image.Mutate(x => x.Resize(new ResizeOptions
            {
                Size = new Size(200, 200),
                Mode = ResizeMode.Crop
            }));
        using var outStream = new MemoryStream();
        await image.SaveAsJpegAsync(outStream);
        return Convert.ToBase64String(outStream.ToArray());
    }



    private async Task SaveUserAsync()
    {
        var responseHttp = await repository.PutAsync<User, TokenDTO>("/api/accounts", user!);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await loginService.LoginAsync(responseHttp.Response!.Token);

        navigationManager.NavigateTo("/");
    }
}