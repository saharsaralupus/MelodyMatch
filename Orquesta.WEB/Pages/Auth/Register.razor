@page "/register"
@using Orquesta.Shared.DTOs;
@using Orquesta.Shared.Enums;
@using Orquesta.WEB.AuthenticationProviders;
@using Orquesta.WEB.Services;
@using Orquesta.Shared;
@using Orquesta.WEB.Shared;
@inject IRepository repository;
@inject SweetAlertService sweetAlertService;
@inject NavigationManager navigationManager;
@inject ILoginService loginService;

@using System.IO
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Formats.Jpeg

<style>
    .login-page {
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: center;
        aling-item: center;
        background-image: url('https://images.pexels.com/photos/1434625/pexels-photo-1434625.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2');
        background-size: cover;
        background-position:center;
    }

    .login-card {
        z-index: 1;
        background: rgba(255, 255, 255, 0.8); /* Optional: Adds a background with some transparency */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 700px;
        width: 100%;
        margin: auto;
    }

    .image-preview {
        max-width: 100%;
        height: auto;
        border-radius: 10px; /* Opcional: Añade bordes redondeados a la imagen */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Opcional: Añade sombra a la imagen */
    }

</style>


<div class="login-page">
    <div class="login-card">
        <PageTitle>Registrar</PageTitle>
        <EditForm Model="userDTO" OnValidSubmit="CreateUserAsync">
            <DataAnnotationsValidator />

            <div class="card">
                <div class="card-header">
                    <div class="card-header">
                        <span>
                            <i class="pi pi-person"></i> Registrar Nuevo Usuario
                            <button class="btn btn-sm btn-primary float-end" type="submit">
                                <i class="oi oi-check"></i> Registrar
                            </button>
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput" placeholder="FirstName " @bind-Value="@userDTO.FirstName" />
                                <label for="floatingInput">Nombre</label>
                                <ValidationMessage For="@(() => userDTO.FirstName)" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput2" placeholder="Last Name" @bind-Value="@userDTO.LastName" />
                                <label for="floatingInput2">Apellido</label>
                                <ValidationMessage For="@(() => userDTO.LastName)" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput3" placeholder="Identification Number :" @bind-Value="@userDTO.Document" />
                                <label for="floatingInput3">Documento</label>
                                <ValidationMessage For="@(() => userDTO.Document)" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput4" placeholder="Phone Number " @bind-Value="@userDTO.PhoneNumber" />
                                <label for="floatingInput4">Teléfono</label>
                                <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="email" class="form-control" id="floatingInput6" placeholder="Email" @bind-Value="@userDTO.Email" />
                                <label for="floatingInput6">Email</label>
                                <ValidationMessage For="@(() => userDTO.Email)" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-floating mb-3">
                                <InputText type="password" class="form-control" id="floatingInput7" placeholder="Password" @bind-Value="@userDTO.Password" />
                                <label for="floatingInput7">Contraseña</label>
                                <ValidationMessage For="@(() => userDTO.Password)" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" class="form-control" id="floatingInput7" placeholder="Password Confirmation" @bind-Value="@userDTO.PasswordConfirm" />
                                <label for="floatingInput7">Confirmación de contraseña</label>
                                <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                            </div>
                            <div class="mb-3">
                                <InputFile OnChange="HandleSelectedImage" class="form-control" />
                                @if (!string.IsNullOrEmpty(imageUrl))
                                {
                                    <img src="@imageUrl" class="image-preview" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
         </EditForm>
    </div>
</div>

@code {

    private User Users = new();
    private UserDTO userDTO = new();
    private string imageUrl;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(userDTO.Photo))
        {
            imageUrl = userDTO.Photo;
            userDTO.Photo = null;
        }
    }

    private async Task HandleSelectedImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var resizedImage = await ResizeImage(file);
            var base64Image = $"data:image/jpeg;base64,{resizedImage}";
            userDTO.Photo = resizedImage;
            imageUrl = base64Image;
        }
    }

    private async Task<string> ResizeImage(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var image = await Image.LoadAsync(stream);
        image.Mutate(x => x.Resize(new ResizeOptions
            {
                Size = new Size(200, 200),
                Mode = ResizeMode.Crop
            }));
        using var outStream = new MemoryStream();
        await image.SaveAsJpegAsync(outStream);
        return Convert.ToBase64String(outStream.ToArray());
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsAdmin { get; set; }

    private async Task CreateUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        if (IsAdmin)
        {
            userDTO.UserType = UserType.Admin;
        }
        else
        {
            userDTO.UserType = UserType.UserContratante;
        }
        var responseHttp = await repository.PostAsync<UserDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        if (IsAdmin == true)
        {
            navigationManager.NavigateTo("/Users");
        }
        else
        {
            await sweetAlertService.FireAsync("Confirmación", "Su cuenta ha sido creada con éxito. Se te ha enviado un correo electrónico con las instrucciones para activar tu usuario.", SweetAlertIcon.Info);
            navigationManager.NavigateTo("/");
        }
    }
}