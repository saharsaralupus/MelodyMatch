@page "/Users/edit/{UserId}"
@using CurrieTechnologies.Razor.SweetAlert2
@using Blazored.Modal
@using Blazored.Modal.Services
@using Orquesta.Shared.Entities
@using Orquesta.WEB.Pages.Auth
@using Orquesta.WEB.Repositories
@using Orquesta.WEB.Services
@using Orquesta.Shared.DTOs
@attribute [Authorize(Roles = "Admin")]
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inherits LayoutComponentBase
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@using System.IO
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Formats.Jpeg

<PageTitle>Editar Usuario</PageTitle>

<style>
    /* Estilos para la modal */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4); /* Fondo semi-transparente */
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        display: flex; /* Utiliza flexbox para alinear elementos */
    }

    .modal-image-preview {
        max-width: 200px; /* Ajusta el tamaño máximo de la imagen previa */
        margin-right: 20px; /* Espacio a la derecha de la imagen */
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@if (user == null)
{
    <div class="spinner"></div>
}
else
{
    <EditForm Model="user" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="bi bi-person-slash"></i> Editar Usuario
                    <button class="btn btn-sm btn-dark mx-2 float-end" type="submit"><i class="bi bi-floppy2"></i> Guardar cambios</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <select class="form-select" id="floatingInput" placeholder="User Type" @bind="@user.UserType">
                                <option value="0">-- Selecciona un tipo de usuario --</option>
                                <option value="User">Usuario</option>
                                <option value="Admin">Administrador</option>
                            </select>
                            <label for="floatingInput">Tipo de usuario:</label>
                            <ValidationMessage For="@(() => user.UserType)" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput3" placeholder="First Name" @bind-Value="@user.FirstName" />
                            <label for="floatingInput3">Nombre:</label>
                            <ValidationMessage For="@(() => user.FirstName)" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput4" placeholder="Last Name" @bind-Value="@user.LastName" />
                            <label for="floatingInput4">Apellido:</label>
                            <ValidationMessage For="@(() => user.LastName)" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput5" placeholder="Document" @bind-Value="@user.Document" />
                            <label for="floatingInput5">Documento:</label>
                            <ValidationMessage For="@(() => user.Document)" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput6" placeholder="Phone" @bind-Value="@user.PhoneNumber" />
                            <label for="floatingInput6">Teléfono:</label>
                            <ValidationMessage For="@(() => user.PhoneNumber)" />
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <InputFile OnChange="HandleSelectedImage" class="form-control" />
                            @if (!string.IsNullOrEmpty(imageUrl))
                            {
                                <img src="@imageUrl" class="modal-image-preview" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public string UserId { get; set; }
    private User user;
    private string imageUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();
        if (!string.IsNullOrEmpty(user!.Photo))
        {
            imageUrl = user.Photo;
            user.Photo = null;
        }
    }

    private async Task HandleSelectedImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var resizedImage = await ResizeImage(file);
            var base64Image = $"data:image/jpeg;base64,{resizedImage}";
            user.Photo = resizedImage;
            imageUrl = base64Image;
        }
    }

    private async Task<string> ResizeImage(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var image = await Image.LoadAsync(stream);
        image.Mutate(x => x.Resize(new ResizeOptions
            {
                Size = new Size(200, 200),
                Mode = ResizeMode.Crop
            }));
        using var outStream = new MemoryStream();
        await image.SaveAsJpegAsync(outStream);
        return Convert.ToBase64String(outStream.ToArray());
    }

    private async Task LoadUserAsyc()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            var responseHTTP = await repository.GetAsync<User>($"api/users/{UserId}");
            if (responseHTTP.Error)
            {
                if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigationManager.NavigateTo("users");
                    return;
                }
                else
                {
                    var mensajeError = await responseHTTP.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                    return;
                }
            }
            user = responseHTTP.Response;
            if (user != null && !string.IsNullOrEmpty(user.Photo))
            {
                imageUrl = user.Photo;
                user.Photo = null;
            }
        }
        else
        {
            await sweetAlertService.FireAsync("Error", "User ID is missing", SweetAlertIcon.Error);
            navigationManager.NavigateTo("users");
        }
    }

    private void ImageSelected(string imagenBase64)
    {
        if (user != null)
        {
            user.Photo = imagenBase64;
            imageUrl = null;
        }
    }

    private async Task SaveUserAsync()
    {
        var responseHttp = await repository.PutAsync<User>("/api/accounts/User", user);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        // Mostrar mensaje de éxito y cerrar la modal
        await sweetAlertService.FireAsync("Éxito", "Usuario actualizado correctamente", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/users", true); // Recargar la página
    }
}
