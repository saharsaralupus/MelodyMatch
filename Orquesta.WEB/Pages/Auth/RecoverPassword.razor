@using Orquesta.Shared.DTOs;
@page "/RecoverPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<PageTitle>Password Recovery</PageTitle>


@if (loading)
{
    <div class="spinner" />
}




<EditForm Model="emailDTO" OnValidSubmit="SendRecoverPasswordEmailTokenAsync">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <span>
                <i class="bi bi-key" /> Send Password Recovery Email

            </span>
        </div>
        <div class="card-body">


            <div class="form-floating mb-3">
                <InputText class="form-control" id="floatingInput" placeholder="Email " @bind-Value="@emailDTO.Email" />
                <label for="floatingInput">Email :</label>
                <ValidationMessage For="@(() => emailDTO.Email)" />
                <div id="emailHelp" class="form-text">
                    &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                    &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                    &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                    &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                    &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex align-items-center justify-
-center py-4">

        <button class="btn btn-sm btn-dark float-end mx-2" type="submit"><i class="bi bi-loop-square" /> Send</button>
    </div>
</EditForm>



@code {

    private EmailDTO emailDTO = new();
    private bool loading;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task SendRecoverPasswordEmailTokenAsync()

    {

        loading = true;

        var responseHttp = await repository.PostAsync("/api/accounts/RecoverPassword", emailDTO);

        if (responseHttp.Error)

        {

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);

            loading = false;

            return;

        }

        loading = false;

        await sweetAlertService.FireAsync("Confirmar", "Se ha enviado un correo electrónico con instrucciones sobre cómo recuperar tu contraseña.", SweetAlertIcon.Info);
    }

}