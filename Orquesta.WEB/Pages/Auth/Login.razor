@page "/Login"
@using Blazored.Modal
@using Blazored.Modal.Services
@using Orquesta.Shared.DTOs;
@using Orquesta.WEB.AuthenticationProviders;
@using Orquesta.WEB.Services
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<style>
    .login-page {
        position: relative;
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-image: url('https://images.pexels.com/photos/1434625/pexels-photo-1434625.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2');
        background-size: cover;
        background-position: center;
        overflow: hidden;
    }

    .login-card {
        position: relative;
        z-index: 1;
        width: 100%;
        max-width: 400px;
        background: rgba(255, 255, 255, 0.8); /* Optional: Adds a background with some transparency */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 90%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

</style>

<div class="login-page">
    <div class="login-card">
        <PageTitle>Login</PageTitle>
        <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />

            <div class="card">
                <div class="card-header d-flex align-items-center justify-content-center">
                    <span>
                        <i class="bi bi-person" /> Ingresar
                    </span>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <div class="form-floating">
                                <InputText type="email" class="form-control" id="floatingInput" placeholder="name@example.com" @bind-Value="@loginDTO.Email" />
                                <label for="floatingInput">Email address</label>
                                <div id="emailHelp" class="form-text"></div>
                            </div>
                            <div class="form-floating">
                                <InputText type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind-Value="@loginDTO.Password" />
                                <label for="floatingPassword">Password</label>
                            </div>
                        </div>
                    </div>
                </div>
                <span></span>
            </div>

            <div class="d-flex align-items-center justify-content-center py-2">
                <button class="btn btn-success" type="Submit"><i class="bi bi-box-arrow-right"></i> Ingresar </button>
            </div>
        </EditForm>
        <button class="btn btn-link" @onclick="ShowModal"> ¿Olvidaste tu contraseña? </button>
        <div class="modal" style="@(isModalVisible ? "display:flex;" : "display:none;")">
            <div class="modal-content">
                <span class="close" @onclick="HideModal">&times;</span>
                <RecoverPassword />
            </div>
        </div>
    </div>
</div>

@code {
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;
    private LoginDTO loginDTO = new();
    private bool isModalVisible = false;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task LoginAsync()
    {
        // Verificar que los objetos inyectados no son nulos
        if (repository == null || sweetAlertService == null || loginService == null || navigationManager == null)
        {
            Console.WriteLine("Uno o más servicios inyectados son nulos");
            return;
        }

        var responseHttp = await repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        else
        {
            await loginService.LoginAsync(responseHttp.Response!.Token);
            if (BlazoredModal != null)
            {
                await BlazoredModal.CloseAsync(ModalResult.Ok());
            }
            navigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private async Task ShowModal()
    {
        isModalVisible = true;
    }
    private void HideModal()
    {
        isModalVisible = false;
    }
}
