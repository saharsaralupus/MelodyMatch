@page "/users"
@using Blazored.Modal;
@using Blazored.Modal.Services;
@using Orquesta.Shared.Entities;
@using Orquesta.WEB.Pages.Auth;
@using Orquesta.WEB.Repositories;
@using Orquesta.WEB.Services
@using Orquesta.Shared.DTOs;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<style>
    .page-container {
        margin: 0px auto;
        padding: 0px;
        max-width: 1000px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .table-container {
        overflow-x: auto;
        white-space: nowrap;
        margin-top: 20px;
    }

    .card-header {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        padding: 15px;
        border-radius: 10px 10px 0 0;
    }

    .table {
        border: 1px solid #ddd;
        border-radius: 5px;
    }

        .table th, .table td {
            text-align: center;
            vertical-align: middle;
        }

        .table th {
            background-color: #f1f1f1;
            font-weight: bold;
        }

    .btn {
        margin: 0 5px;
    }

    .img-circle {
        border-radius: 50%;
        width: 60px;
        height: 60px;
        object-fit: cover;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        border-radius: 10px;
        max-width: 600px;
    }

    .card-body {
        flex: 1 1 auto;
        padding: 1rem 1rem;
        margin-bottom: 30%;
    }

</style>

@if (Users is null)
{
    <div class="spinner"></div>
}
else
{
    <div class="page-container">
        <div class="card-body">
            <GenericList MyList="Users">
                <Body>
                    <div class="card">
                        <div class="card-header">
                            <span>
                                <i class="oi oi-people"></i> Usuarios
                                <a class="btn btn-sm btn-primary float-end" href="/register/?IsAdmin=true">
                                    <i class="bi bi-plus-circle"></i> Nuevo Usuario
                                </a>
                            </span>
                        </div>
                        <div class="table-container">
                            <table class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>Imagén</th>
                                        <th>Usuario</th>
                                        <th>Documento</th>
                                        <th>Teléfono</th>
                                        <th>Email</th>
                                        <th>Confirmado</th>
                                        <th>Tipo Usuario</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in Users)
                                    {
                                        <tr>
                                            <td>
                                                <img src="https://localhost:7000/@user.Photo" width="80" height="80" style="border-radius:50%" />
                                            </td>
                                            <td>@user.FullName</td>
                                            <td>@user.Document</td>
                                            <td>@user.PhoneNumber</td>
                                            <td>@user.Email</td>
                                            <td>@user.EmailConfirmed</td>
                                            <td>@user.UserType</td>
                                            <td>
                                                <a @onclick=@(() => ShowModal(user.Id, true)) class="btn btn-outline-primary">
                                                    Editar <i class="bi bi-pencil-square"></i>
                                                </a>
                                                <button class="btn btn-outline-danger" @onclick=@(() => Delete(user))>
                                                    Borrar <i class="bi bi-trash3"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="modal" style="@(isModalVisible ? "display:flex;" : "display:none;")">
                        <div class="modal-content">
                            <span class="close" @onclick="HideModal">&times;</span>
                            @if (userIdToEdit != null)
                            {
                                <UserEdit UserId="@userIdToEdit" />
                            }
                        </div>
                    </div>
                </Body>
            </GenericList>
        </div>
    </div>

}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;
    private bool isModalVisible = false;
    private string userIdToEdit { get; set; }

    private async Task ShowModal(string id = "", bool isEdit = false)
    {
            userIdToEdit = id;
            isModalVisible = true;
    }

        private void HideModal()
        {
           isModalVisible = false;
        }
    

    private async Task ShowModal2()
    {
        isModalVisible = true;
    }

    public List<User> Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private int currentPage = 1;
    private int totalPages;

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }
        string url1 = string.Empty;
        string url2 = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/Users?page={page}";
            url2 = $"api/Users/totalPages";
        }
        else
        {
            url1 = $"api/Users?page={page}&filter={Filter}";
            url2 = $"api/Users/totalPages?filter={Filter}";
        }

        var responseHppt = await repository.GetAsync<List<User>>(url1);
        var responseHppt2 = await repository.GetAsync<int>(url2);
        Users = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task LoadUserAsyc()
    {
        var responseHttp = await repository.GetAsync<List<User>>("/api/accounts/nombre");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Users = responseHttp.Response;
    }

    private async Task Delete(User user)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = $"You really want to delete the User : {user.FullName}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "yes"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"/api/users/{user.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/users");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
            toast.FireAsync(icon: SweetAlertIcon.Success, message: "User Successfully Deleted.");
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }
}

