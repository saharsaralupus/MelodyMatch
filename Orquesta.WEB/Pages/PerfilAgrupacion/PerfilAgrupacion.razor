@page "/perfilAgrupacion/{Id:int}"
@using Orquesta.Shared.Entities
@using Orquesta.WEB.Repositories
@using Orquesta.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    .profile-container {
        width: 80%;
        max-width: 800px;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .header-image img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .profile-content {
        padding: 20px;
    }

    .profile-info {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .profile-pic {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
    }

    .profile-text h2 {
        font-size: 1.5em;
        margin-bottom: 5px;
    }

    .genre {
        font-size: 0.9em;
        color: #555;
    }

    .reserve-button {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        text-decoration: none;
    }

    .description h3 {
        margin-top: 20px;
        font-size: 1.2em;
    }

    .description p {
        margin: 10px 0;
    }

    .repertoire-button {
        margin-top: 10px;
        padding: 10px;
        background-color: #7289da;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
    }

    .ratings {
        margin-top: 20px;
    }

        .ratings h3 {
            font-size: 1.2em;
        }

    .ratings-summary {
        margin-top: 10px;
        border-top: 1px solid #ccc;
        padding-top: 10px;
    }

    .stars-summary {
        color: #FFD700;
        font-size: 0.9em;
    }

    .ratings-list {
        margin-top: 10px;
    }

    .rating {
        margin-bottom: 10px;
    }

    .stars {
        color: #FFD700;
        font-size: 1em;
        margin-bottom: 5px;
    }

</style>

<div class="header-image">
    <img src="https://musicanddynamics.com/wp-content/uploads/2021/04/clases-de-lenguaje-musical.jpeg" alt="Orquesta">
</div>

@if (agrupacion != null)
{
    <div class="profile-content">
        <div class="profile-info">
            <img class="profile-pic" src="https://live.staticflickr.com/3542/3661289018_8aae162a56_c.jpg" alt="Foto del artista">
            <div class="profile-text">
                <h2>@agrupacion.Name</h2>
                <h1 class="genre">@GetGeneroMusicalName(agrupacion.Id)</h1>
                @* <button class="reserve-button" >Reservar</button> *@
                <a href="procesoReservacion" class="reserve-button">Reservar</a>
            </div>
        </div>

        <div class="description">
            <h3>Descripción</h3>
            <p>@agrupacion.Description</p>
            <p><strong>Precio / hora:</strong> @agrupacion.Price_Hour</p>
          @*   <button class="repertoire-button" href="/integrante">Conoce nuestro repertorio</button> *@
            <a href="repertorio" class="repertoire-button">Conoce nuestro repertorio</a>
        </div>

        <div class="ratings">
            <h3>Calificaciones</h3>
            <div class="ratings-summary">
                <div class="stars-summary">
                    <span>⭐⭐⭐⭐⭐</span> i<br>
                    <span>⭐⭐⭐⭐</span> 1<br>
                    <span>⭐⭐⭐</span> 0<br>
                    <span>⭐⭐</span> 0<br>
                    <span>⭐</span> 1<br>
                </div>
            </div>
            <GenericList MyList="Calificacion_Agrupaciones">
                <Body>
                <div class="ratings-list">
                        @foreach (var item in Calificacion_Agrupaciones!)
                        {
                            @if (item.AgrupacionId == agrupacion.Id)
                            {
                                <div class="rating">
                                    @if (item.Puntaje == 5)
                                    {
                                        <div class="stars">⭐⭐⭐⭐</div>
                                    }
                                    <p>@item.Comentario</p>
                                </div>
                            }
                            
                     }
                </div>
            </Body>
            </GenericList>
        </div>
    </div>
}
else
{
    <p>Cargando datos...</p>
}


@code {

    [Parameter]
    public int Id { get; set; }

    public Agrupacion agrupacion;
    private List<Agrupacion_Genero> AgrupacionGeneros { get; set; }
    private List<GeneroMusical> GeneroMusicals { get; set; }
    private List<Calificacion_Agrupacion> Lista_Filtrada { get; set; }
    private List<Calificacion_Agrupacion> Calificacion_Agrupaciones { get; set; } 
    public List<Agrupacion> Agrupaciones { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Agrupacion_Genero>>("/api/agrupacionGenero");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        AgrupacionGeneros = responseHttp.Response;

        var responseRepresentante = await repository.GetAsync<List<GeneroMusical>>("/api/generoMusical");
        if (!responseRepresentante.Error)
        {
            GeneroMusicals = responseRepresentante.Response;
        }

        var responseCalificacionAgrupacion = await repository.GetAsync<List<Calificacion_Agrupacion>>("/api/calificacion_agrupacion");
        if (!responseCalificacionAgrupacion.Error)
        {
            Calificacion_Agrupaciones = responseCalificacionAgrupacion.Response;
        }
     
    }

    protected override async Task OnParametersSetAsync()
    {
        var responseHttp = await repository.GetAsync<Agrupacion>($"/api/agrupacion/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/agrupacion");
            }
            else
            {
                var messsage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
            }
        }
        else
        {
            agrupacion = responseHttp.Response;
        }
    }


    private string GetGeneroMusicalName(int AgrupacionId)
    {
        if (AgrupacionGeneros == null || GeneroMusicals == null)
        {
            return "Datos no disponibles"; // O cualquier mensaje que consideres apropiado
        }

        var agrupaciongenero = AgrupacionGeneros.FirstOrDefault(i => i.AgrupacionId == AgrupacionId);
        if (agrupaciongenero == null)
        {
            return "Género no encontrado";
        }

        var generoMusical = GeneroMusicals.FirstOrDefault(i => i.Id == agrupaciongenero.GeneroMusicalId);
        return generoMusical != null ? generoMusical.Name : "Género no encontrado";
    }

}
