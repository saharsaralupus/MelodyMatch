@page "/perfilContratante/{Id:int}"
@using Orquesta.Shared.Entities
@using Orquesta.WEB.Repositories
@using Orquesta.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    .profile-container {
        width: 80%;
        max-width: 800px;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .header-image img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .profile-content {
        padding: 20px;
    }

    .profile-info {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .profile-pic {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
    }

    .profile-text h2 {
        font-size: 1.5em;
        margin-bottom: 5px;
    }

    .genre {
        font-size: 0.9em;
        color: #555;
    }

    .reserve-button {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        text-decoration: none;
    }

    .description h3 {
        margin-top: 20px;
        font-size: 1.2em;
    }

    .description p {
        margin: 10px 0;
    }

    .repertoire-button {
        margin-top: 10px;
        padding: 10px;
        background-color: #7289da;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
    }

    .ratings {
        margin-top: 20px;
    }

        .ratings h3 {
            font-size: 1.2em;
        }

    .ratings-summary {
        margin-top: 20px;
        border-top: 1px solid #ccc;
        padding-top: 30px;
    }

    .stars-summary {
        color: #FFD700;
        font-size: 0.9em;
    }

    .ratings-list {
        margin-top: 10px;
    }

    .rating {
        margin-bottom: 10px;
    }

    .stars {
        color: #FFD700;
        font-size: 1em;
        margin-bottom: 5px;
    }

</style>

@if (contratante != null)
{
    <div class="profile-content">
        <div class="profile-info">
            <img class="profile-pic" src="https://live.staticflickr.com/3542/3661289018_8aae162a56_c.jpg" alt="Foto del artista">
            <div class="profile-text">
                <h2>@contratante.Name</h2>
            </div>
        </div>

        <div class="ratings">
            <h3>Calificaciones</h3>
            <div class="ratings-summary">
                @{
                    var puntajes = ContadorPuntaje(contratante.Id);
                }
                <div class="stars-summary">
                    <span>⭐⭐⭐⭐⭐</span> @puntajes[0]<br>
                    <span>⭐⭐⭐⭐</span> @puntajes[1]<br>
                    <span>⭐⭐⭐</span> @puntajes[2]<br>
                    <span>⭐⭐</span> @puntajes[3]<br>
                    <span>⭐</span> @puntajes[4]<br>
                </div>
            </div>

            <div class="ratings-list">
                @foreach (var item in Calificacion_Contratante!)
                {
                    if (item.ContratanteId == contratante.Id)
                    {
                        <div class="rating">
                            <div class="stars">
                                @for (int i = 0; i < item.Puntaje; i++)
                                {
                                    <span>⭐</span>
                                }
                            </div>
                            <p>@item.Comentario</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}
else
{
    <p>Cargando datos...</p>
}


@code {

    [Parameter]
    public int Id { get; set; }

    public Contratante contratante;
    public List<Calificacion_Contratante> Calificacion_Contratante { get; set; }
    public List<Contratante> Contratantes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {     

        var responseCalificacionContratante = await repository.GetAsync<List<Calificacion_Contratante>>("/api/califiacion_contratante");
        if (!responseCalificacionContratante.Error)
        {
            Calificacion_Contratante = responseCalificacionContratante.Response;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var responseHttp = await repository.GetAsync<Contratante>($"/api/contratante/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/contratante");
            }
            else
            {
                var messsage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
            }
        }
        else
        {
            contratante = responseHttp.Response;
        }
    }


    private List<int> ContadorPuntaje(int ContratanteId)
    {
        int count5 = 0;
        int count4 = 0;
        int count3 = 0;
        int count2 = 0;
        int count1 = 0;

        var calificaciones = Calificacion_Contratante.Where(i => i.ContratanteId == ContratanteId);

        foreach (var item in calificaciones)
        {
            switch (item.Puntaje)
            {
                case 5: count5++; break;
                case 4: count4++; break;
                case 3: count3++; break;
                case 2: count2++; break;
                case 1: count1++; break;
            }
        }

        return new List<int> { count5, count4, count3, count2, count1 };
    }

}
