@page "/perfilAgrupacion/{Id:int}"
@using Orquesta.Shared.Entities
@using Orquesta.WEB.Repositories
@using Orquesta.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    .profile-container {
        width: 80%;
        max-width: 800px;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .header-image img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .profile-content {
        padding: 20px;
    }

    .profile-info {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .profile-pic {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
    }

    .profile-text h2 {
        font-size: 1.5em;
        margin-bottom: 5px;
    }

    .genre {
        font-size: 0.9em;
        color: #555;
    }

    .reserve-button {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        text-decoration: none;
    }

    .description h3 {
        margin-top: 20px;
        font-size: 1.2em;
    }

    .description p {
        margin: 10px 0;
    }

    .repertoire-button {
        margin-top: 10px;
        padding: 10px;
        background-color: #7289da;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
    }

    .ratings {
        margin-top: 20px;
    }

        .ratings h3 {
            font-size: 1.2em;
        }

    .ratings-summary {
        margin-top: 20px;
        border-top: 1px solid #ccc;
        padding-top: 30px;
    }

    .stars-summary {
        color: #FFD700;
        font-size: 0.9em;
    }

    .ratings-list {
        margin-top: 10px;
    }

    .rating {
        margin-bottom: 10px;
    }

    .stars {
        color: #FFD700;
        font-size: 1em;
        margin-bottom: 5px;
    }

</style>

<div class="header-image">
    <img src="https://musicanddynamics.com/wp-content/uploads/2021/04/clases-de-lenguaje-musical.jpeg" alt="Orquesta">
</div>

@if (agrupacion != null)
{
    <div class="profile-content">
        <div class="profile-info">
            <img class="profile-pic" src="https://localhost:7000/@GetUserPhoto(agrupacion.RepresentanteId)" alt="Foto del artista">
            <div class="profile-text">
                <h2><strong>@agrupacion.Name</strong></h2>
                <h2 class="genre">@GetGeneroMusicalName(agrupacion.Id)</h2>
                 <AuthorizeView Roles="UserContratante">
                    <Authorized>
                    <a href="/procesoReservacion/create/@agrupacion.Id" class="reserve-button">Reservar</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <div class="description">
            <h3><strong>Descripción</strong></h3>
            <p>@agrupacion.Description</p>
            <p><strong>Precio / hora:</strong> @agrupacion.Price_Hour</p>
            <AuthorizeView Roles="UserContratante">
                <Authorized>
                    <a href="repertorioAgrupacion/@agrupacion.Id" class="repertoire-button">Conoce nuestro repertorio</a>
                </Authorized>
            </AuthorizeView>
        </div>

        <div class="ratings">
            <h3><strong>Calificaciones</strong></h3>
            <div class="ratings-summary">
                @{
                    var puntajes = ContadorPuntaje(agrupacion.Id);
                }
                <div class="stars-summary">
                    <span>⭐⭐⭐⭐⭐</span> @puntajes[0]<br>
                    <span>⭐⭐⭐⭐</span> @puntajes[1]<br>
                    <span>⭐⭐⭐</span> @puntajes[2]<br>
                    <span>⭐⭐</span> @puntajes[3]<br>
                    <span>⭐</span> @puntajes[4]<br>
                </div>
            </div>

            <div class="ratings-list">
                @foreach (var item in Calificacion_Agrupaciones!)
                {
                    if (item.AgrupacionId == agrupacion.Id)
                    {
                        <div class="rating">
                            <div class="stars">
                                @for (int i = 0; i < item.Puntaje; i++)
                                {
                                    <span>⭐</span>
                                }
                            </div>
                            <p>@item.Comentario</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}
else
{
    <p>Cargando datos...</p>
}


@code {

    [Parameter]
    public int Id { get; set; }

    public Agrupacion agrupacion;
    private List<Agrupacion_Genero> AgrupacionGeneros { get; set; }
    private List<GeneroMusical> GeneroMusicals { get; set; }
    public List<Calificacion_Agrupacion> Calificacion_Agrupaciones { get; set; }
    public List<Agrupacion> Agrupaciones { get; set; }
    public List<Representante> Representantes { get; set; }
    public List<User> Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Agrupacion_Genero>>("/api/agrupacionGenero");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        AgrupacionGeneros = responseHttp.Response;

        var responseGenero = await repository.GetAsync<List<GeneroMusical>>("/api/generoMusical");
        if (!responseGenero.Error)
        {
            GeneroMusicals = responseGenero.Response;
        }
        
        var responseRepresentante = await repository.GetAsync<List<Representante>>("/api/representante");
        if (!responseRepresentante.Error)
        {
            Representantes = responseRepresentante.Response;
        }

        var responseUser = await repository.GetAsync<List<User>>("/api/accounts/nombre");
        if (!responseUser.Error)
        {
            Users = responseUser.Response;
        }

        var responseCalificacionAgrupacion = await repository.GetAsync<List<Calificacion_Agrupacion>>("/api/calificacion_agrupacion");
        if (!responseCalificacionAgrupacion.Error)
        {
            Calificacion_Agrupaciones = responseCalificacionAgrupacion.Response;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var responseHttp = await repository.GetAsync<Agrupacion>($"/api/agrupacion/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/agrupacion");
            }
            else
            {
                var messsage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
            }
        }
        else
        {
            agrupacion = responseHttp.Response;
        }
    }

    private string GetGeneroMusicalName(int AgrupacionId)
    {
        if (AgrupacionGeneros == null || GeneroMusicals == null)
        {
            return "Datos no disponibles";
        }

        var agrupaciongenero = AgrupacionGeneros.FirstOrDefault(i => i.AgrupacionId == AgrupacionId);
        if (agrupaciongenero == null)
        {
            return "Género no encontrado";
        }

        var generoMusical = GeneroMusicals.FirstOrDefault(i => i.Id == agrupaciongenero.GeneroMusicalId);
        return generoMusical != null ? generoMusical.Name : "Género no encontrado";
    }

    private string GetUserPhoto(int representanteId)
    {
        var representante = Representantes.FirstOrDefault(i => i.Id == representanteId);
        var user = Users.FirstOrDefault(i => i.Document == representante.Document);
        return user != null ? user.Photo : "Foto no encontrada";
    }


    private List<int> ContadorPuntaje(int agrupacionId)
    {
        int count5 = 0;
        int count4 = 0;
        int count3 = 0;
        int count2 = 0;
        int count1 = 0;

        var calificaciones = Calificacion_Agrupaciones.Where(i => i.AgrupacionId == agrupacionId);

        foreach (var item in calificaciones)
        {
            switch (item.Puntaje)
            {
                case 5: count5++; break;
                case 4: count4++; break;
                case 3: count3++; break;
                case 2: count2++; break;
                case 1: count1++; break;
            }
        }

        return new List<int> { count5, count4, count3, count2, count1 };
    }

}
