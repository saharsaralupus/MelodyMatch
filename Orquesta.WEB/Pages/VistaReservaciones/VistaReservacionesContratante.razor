@page "/reservacionesContratante/{Id:int}"
@using Orquesta.Shared.Entities
@using Orquesta.WEB.Repositories
@using Orquesta.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager



<style>
    .profile-content {
    padding: 20px;
    width: 100%;
    background-color: #f5f5f5; /* Fondo para destacar cada perfil */
    margin-bottom: 10px; /* Separación entre perfiles */
    border-radius: 8px; /* Borde redondeado */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra suave */
    }

    .profile-info {
    display: flex;
    align-items: center;
    gap: 20px;
    }

    .profile-pic {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    }

    .profile-text h2 {
    font-size: 1.5em;
    margin-bottom: 5px;
    }

    .titulo{
    align-content:center;
    margin-left:40%;
    margin-right: 40%;
    }

    .reservaciones-list {
    width: 100%;
    }

    .contenedor1{
    display: flex;
    gap: 135px;
    }

    .contenedor2 {
    display: flex;
    gap: 30px;
    }

    .perfil{
    display: flex;
    align-items: center;
    gap: 20px;
    width: 100%;
    }

</style>

<GenericList MyList="Reservaciones">
    <Body>
        <div class="titulo"><h3>RESERVACIONES</h3></div>

        <div class="reservaciones-list">
            @if (ReservacionesEspecifica != null)
            {
                @foreach (var item in ReservacionesEspecifica)
                {
                    <div class="profile-content">
                        <div class="profile-info">
                            <div class="profile-text">
                                <div class="perfil">
                                    <img class="profile-pic" src="https://localhost:7000/@GetUserPhoto(item.ContratanteId)" alt="Foto del contratante">
                                    <div class="profile-text">
                                        <h2 class="genre">@GetAgrupacionName(item.Id)</h2>
                                        <p>Whatsapp: @GetRepresentantePhone(item.Id) </p>
                                        <a href="perfilContratante/@item.ContratanteId" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square"></i> Ver Perfil</a>

                                        @if (item.Fecha < FechaActual)
                                        {
                                            <a href="nombrePagina/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square"></i> Calificar experiencia</a>
                                        }
                                        else
                                        {
                                            <a href="nombrePagina/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square"></i> Cancelar</a>
                                        }
                                    </div>
                                </div>
                                <div class="contenedor1">
                                    <p><strong>Hora:</strong> @item.StartTime</p>
                                    <p><strong>Fecha:</strong> @item.Fecha.ToString("dd/MM/yyyy")</p>
                                </div>
                                <div class="contenedor2">
                                    <p>
                                        <strong>Duración:</strong>
                                        @if (item.FinalTime > item.StartTime)
                                        {
                                            var duracion = item.FinalTime - item.StartTime;
                                            <span>@($"{duracion.Hours} horas y {duracion.Minutes} minutos")</span>
                                        }
                                        else
                                        {
                                            <span>La hora final debe ser mayor que la hora de inicio.</span>
                                        }
                                    </p>
                                    <p><strong>Lugar:</strong> @item.Place</p>                                  
                                </div>
                                <p><strong>Estado:</strong> @GetEstadoReservaName(item.EstadoReservaId)</p>
                            </div>
                        </div>
                    </div>
                }
            } else {
                <span>No hay reservaciones en este momento</span>
            }

        </div>

    </Body>
</GenericList>


@code {
    [Parameter]
    public int Id { get; set; }
    public Reservacion reservacion;
    public Contratante contratante;
    public Agrupacion agrupacion;
    public Representante representante;
    public List<Reservacion> Reservaciones { get; set; }
    public List<Reservacion> ReservacionesEspecifica { get; set; } // Declarada como propiedad pública
    public List<Agrupacion> Agrupaciones { get; set; }
    public List<Representante> Representantes { get; set; }
    public List<EstadoReserva> EstadoReservas { get; set; }
    public List<User> Users { get; set; }

    public DateOnly FechaActual = DateOnly.FromDateTime(DateTime.Now);

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {

        var responseEstadoReserva = await repository.GetAsync<List<EstadoReserva>>("/api/estadoReserva");
        if (!responseEstadoReserva.Error)
        {
            EstadoReservas = responseEstadoReserva.Response;
        }
        var responseHttp = await repository.GetAsync<List<Reservacion>>("/api/reservacion");
        if (!responseHttp.Error)
        {
            Reservaciones = responseHttp.Response;
        }

        var responseRepresentantes = await repository.GetAsync<List<Representante>>("/api/representante");
        if (!responseRepresentantes.Error)
        {
            Representantes = responseRepresentantes.Response;
        }

        var responseAgrupaciones = await repository.GetAsync<List<Agrupacion>>("/api/agrupacion");
        if (!responseAgrupaciones.Error)
        {
            Agrupaciones = responseAgrupaciones.Response;
        }
        var responseUser = await repository.GetAsync<List<User>>("/api/accounts/nombre");
        if (!responseUser.Error)
        {
            Users = responseUser.Response;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var responseHttp = await repository.GetAsync<Contratante>($"/api/contratante/{Id}");
        if (!responseHttp.Error)
        {
            contratante = responseHttp.Response;
            ReservacionesEspecifica = Reservaciones
                .Where(i => i.ContratanteId == contratante.Id)
                .ToList(); // Asignar la lista filtrada
        }
    }

    private string GetAgrupacionName(int ReservacionId)
    {
        var reserva = Reservaciones.FirstOrDefault(i => i.Id == ReservacionId);
        var agrupacion = Agrupaciones.FirstOrDefault(i => i.Id == reserva?.AgrupacionId);
        return agrupacion != null ? agrupacion.Name : "Agrupación no encontrada";
    }

    private string GetRepresentantePhone(int ReservacionId)
    {
        var reserva = Reservaciones.FirstOrDefault(i => i.Id == ReservacionId);
        var agrupacion = Agrupaciones.FirstOrDefault(i => i.Id == reserva?.AgrupacionId);
        var representante = Representantes.FirstOrDefault(i => i.Id == agrupacion?.RepresentanteId);
        return representante != null ? representante.PhoneNumber : "Representante no encontrado";
    }

    private string GetEstadoReservaName(int estadoReservaId)
    {
        var estado = EstadoReservas.FirstOrDefault(i => i.Id == estadoReservaId);
        return estado != null ? estado.Estado : "Estadp no encontrado";
    }

    private string GetUserPhoto(int agrupacionId)
    {
        var agrupacion = Agrupaciones.FirstOrDefault(i => i.Id == agrupacionId);
        var representante = Representantes.FirstOrDefault(i => i.Id == agrupacion.RepresentanteId);
        var user = Users.FirstOrDefault(i => i.Document == representante.Document);
        return user != null ? user.Photo : "Foto no encontrada";
    }
}
