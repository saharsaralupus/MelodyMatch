@page "/vistaReservacionContratante/{Id:int}"
@using Orquesta.Shared.Entities
@using Orquesta.WEB.Repositories
@using Orquesta.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager



<style>
    .profile-content {
    padding: 20px;
    width: 100%;
    background-color: #f5f5f5; /* Fondo para destacar cada perfil */
    margin-bottom: 10px; /* Separación entre perfiles */
    border-radius: 8px; /* Borde redondeado */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra suave */
    }
</style>

<GenericList MyList="Reservaciones">
    <Body>
        <h2>RESERVACIONES</h2>
        <div class="reservaciones-list">
            @if(ReservacionesEspecifica != null)
            {
                @foreach (var item in ReservacionesEspecifica)
                {
                    <div class="profile-content">
                        <div class="profile-info">
                            <div class="profile-text">
                                <h2 class="genre">@GetAgrupacionName(item.Id)</h2>
                                <h3>WHATSAPP: @GetRepresentantePhone(item.Id) </h3>
                                <p><strong>Hora:</strong> @item.StartTime</p>
                                <p><strong>Fecha:</strong> @item.Fecha.ToString("dd/MM/yyyy")</p>
                                <p>
                                    <strong>Duración:</strong>
                                    @if (item.FinalTime > item.StartTime)
                                    {
                                        var duracion = item.FinalTime - item.StartTime;
                                        <span>@($"{duracion.Hours} horas y {duracion.Minutes} minutos")</span>
                                    }
                                    else
                                    {
                                        <span>La hora final debe ser mayor que la hora de inicio.</span>
                                    }
                                </p>
                                <p><strong>Lugar:</strong> @item.Place</p>
                            </div>
                        </div>
                    </div>
                }
             }

        </div>

    </Body>
</GenericList>


@code {
    [Parameter]
    public int Id { get; set; }
    public Reservacion reservacion;
    public Contratante contratante;
    public Agrupacion agrupacion;
    public Representante representante;
    public List<Reservacion> Reservaciones { get; set; }
    public List<Reservacion> ReservacionesEspecifica { get; set; } // Declarada como propiedad pública
    public List<Agrupacion> Agrupaciones { get; set; }
    public List<Representante> Representantes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Reservacion>>("/api/reservacion");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Reservaciones = responseHttp.Response;

        var responseRepresentantes = await repository.GetAsync<List<Representante>>("/api/representante");
        if (!responseRepresentantes.Error)
        {
            Representantes = responseRepresentantes.Response;
        }

        var responseAgrupaciones = await repository.GetAsync<List<Agrupacion>>("/api/agrupacion");
        if (!responseAgrupaciones.Error)
        {
            Agrupaciones = responseAgrupaciones.Response;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var responseHttp = await repository.GetAsync<Contratante>($"/api/contratante/{Id}");
        if (!responseHttp.Error)
        {
            contratante = responseHttp.Response;
            ReservacionesEspecifica = Reservaciones
                .Where(i => i.ContratanteId == contratante.Id)
                .ToList(); // Asignar la lista filtrada
        }
    }

    private string GetAgrupacionName(int ReservacionId)
    {
        var reserva = Reservaciones.FirstOrDefault(i => i.Id == ReservacionId);
        var agrupacion = Agrupaciones.FirstOrDefault(i => i.Id == reserva?.AgrupacionId);
        return agrupacion != null ? agrupacion.Name : "Agrupación no encontrada";
    }

    private string GetRepresentantePhone(int ReservacionId)
    {
        var reserva = Reservaciones.FirstOrDefault(i => i.Id == ReservacionId);
        var agrupacion = Agrupaciones.FirstOrDefault(i => i.Id == reserva?.AgrupacionId);
        var representante = Representantes.FirstOrDefault(i => i.Id == agrupacion?.RepresentanteId);
        return representante != null ? representante.PhoneNumber : "Representante no encontrado";
    }
}