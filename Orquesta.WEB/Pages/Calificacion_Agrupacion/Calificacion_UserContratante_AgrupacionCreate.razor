@page "/calificarAgrupacion/create/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject AuthenticationStateProvider authenticationStateProvider


<style>
    .titulo {
        font-size: 1.75rem;
        margin-left: 20px;
        margin-top: 20px;
    }
</style>

<div class="titulo">
    <h3>Crear</h3>
</div>
<Calificacion_UserContratante_AgrupacionForm @ref="calificacion_UserContratante_AgrupacionForm" Calificacion_Agrupacion="calificacion_Agrupacion" OnSubmit="Create" ReturnAction="Return" />

@code {
    private Calificacion_Agrupacion calificacion_Agrupacion = new Calificacion_Agrupacion();
    private Calificacion_UserContratante_AgrupacionForm calificacion_UserContratante_AgrupacionForm;
    [Parameter]
    public int Id { get; set; }


    private async Task Create()
    {
        calificacion_Agrupacion.AgrupacionId = Id;

        var responseHttp = await repository.PostAsync("/api/calificacion_agrupacion", calificacion_Agrupacion);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message);
            return;
        }

        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito");
    }

    private void Return()
    {
        calificacion_UserContratante_AgrupacionForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/");
    }
}
