@page "/procesoReservacion"
@using Orquesta.Shared.Entities
@using System.ComponentModel.DataAnnotations
@inject SweetAlertService swal
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<h3>ProcesoReservacion</h3>

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Tiempo inicial</label>
        <div>
            <InputText type="time" class="form-control" @bind-Value="startTimeString" />
        </div>
    </div>
    <div class="mb-3">
        <label>Tiempo final</label>
        <div>
            <InputText type="time" class="form-control" @bind-Value="finalTimeString" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha</label>
        <div>
            <InputDate class="form-control" @bind-Value="Reservacion.Fecha" />
            <ValidationMessage For="@(() => Reservacion.Fecha)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Lugar</label>
        <div>
            <InputText class="form-control" @bind-Value="Reservacion.Place" />
            <ValidationMessage For="@(() => Reservacion.Place)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Para confirmar la reserva coloque su Documento y presione guardar!</label>
        <div>
            <InputText class="form-control" @bind-Value="Documento" />
            <ValidationMessage For="@(() => Documento)" />
        </div>
    </div>


    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-info" type="reset">Limpiar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>

</EditForm>

@code {
    private EditContext editContext;
    private string startTimeString;
    private string finalTimeString;
    private string Documento;
    public List<Contratante> Contratantes { get; set; } = new List<Contratante>();

    [EditorRequired]
    [Parameter]
    public Reservacion Reservacion { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Reservacion);

        var responseRepresentante = await repository.GetAsync<List<Contratante>>("api/contratante");
        if (!responseRepresentante.Error)
        {
            Contratantes = responseRepresentante.Response;
        }
    }

    private int GetContratanteId ()
    {
        var contratante = Contratantes.FirstOrDefault(c =>
            string.Equals(c.Document, Documento?.Trim(), StringComparison.OrdinalIgnoreCase));

        if (contratante != null)
        {
            Reservacion.ContratanteId = contratante.Id;
            return contratante.Id;
        }

        Reservacion.ContratanteId = 0; // Asegúrate de resetearlo si no se encuentra
        return 0;
    }

    private async Task HandleValidSubmit()
    {
        if (TimeSpan.TryParse(startTimeString, out var startTime) &&
            TimeSpan.TryParse(finalTimeString, out var finalTime))
        {
            Reservacion.StartTime = startTime;
            Reservacion.FinalTime = finalTime;
            var contratanteId = GetContratanteId();
            if (contratanteId == 0)
            {
                await swal.FireAsync("Error", "No se encontró un contratante con el documento ingresado.", SweetAlertIcon.Error);
                return;
            }
            await OnSubmit.InvokeAsync(null);
        }
        else
        {
            await swal.FireAsync("Error", "Los tiempos proporcionados no son válidos.", SweetAlertIcon.Error);
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}
